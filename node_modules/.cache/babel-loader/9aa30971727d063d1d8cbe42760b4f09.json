{"ast":null,"code":"class Tree {\n  constructor(value) {\n    this.value = value;\n    this.children = [];\n  }\n\n  addChild(value) {\n    const newChild = new Tree(value);\n    this.children.push(newChild);\n  }\n\n  contains(target) {\n    let doesContain = false;\n\n    function recurse(cur) {\n      if (cur.value == target || JSON.stringify(cur.value) == JSON.stringify(target)) {\n        doesContain = true;\n      } else {\n        for (let i = 0; i < cur.children.length; i += 1) {\n          if (cur.children[i].value == target || JSON.stringify(cur.children[i].value) == JSON.stringify(target)) {\n            doesContain = true;\n          }\n\n          if (cur.children[i].children.length > 0) {\n            recurse(cur.children[i]);\n          }\n        }\n      }\n    }\n\n    ;\n    recurse(this);\n    let retval = false;\n\n    if (doesContain === true) {\n      retval = true;\n    }\n\n    ;\n    return retval;\n  }\n\n  containsId(target) {\n    let doesContain = false;\n\n    function recurse(cur) {\n      let matchId = false;\n\n      if (typeof cur.value == \"object\") {\n        Object.values(cur.value).forEach((item, i) => {\n          if (item == target && i === 0) {\n            matchId = true;\n          }\n        });\n      }\n\n      if (cur.value == target || JSON.stringify(cur.value) == JSON.stringify(target) || matchId) {\n        doesContain = true;\n      } else {\n        for (let i = 0; i < cur.children.length; i += 1) {\n          if (typeof cur.children[i].value == \"object\") {\n            Object.values(cur.children[i].value).forEach((item, i) => {\n              if (item == target && i === 0) {\n                matchId = true;\n              }\n            });\n          }\n\n          if (cur.children[i].value == target || JSON.stringify(cur.children[i].value) == JSON.stringify(target) || matchId) {\n            doesContain = true;\n          }\n\n          if (cur.children[i].children.length > 0) {\n            recurse(cur.children[i]);\n          }\n        }\n      }\n    }\n\n    ;\n    recurse(this);\n    let retval = false;\n\n    if (doesContain === true) {\n      retval = true;\n    }\n\n    ;\n    return retval;\n  }\n\n  getNode(target) {\n    let doesContain = false;\n    let retVal;\n\n    function recurse(cur) {\n      if (cur.value == target || JSON.stringify(cur.value) == JSON.stringify(target)) {\n        doesContain = true;\n        retVal = cur;\n      } else {\n        for (let i = 0; i < cur.children.length; i += 1) {\n          if (cur.children[i].value == target || JSON.stringify(cur.children[i].value) == JSON.stringify(target)) {\n            doesContain = true;\n            retVal = cur.children[i];\n          }\n\n          if (cur.children[i].children.length > 0) {\n            recurse(cur.children[i]);\n          }\n        }\n      }\n    }\n\n    ;\n    recurse(this);\n\n    if (doesContain === true) {\n      return retVal;\n    }\n\n    ;\n  }\n\n  getNodeById(target) {\n    let doesContain = false;\n    let retVal;\n\n    function recurse(cur) {\n      let matchId = false;\n      let keys = Object.keys(cur.value);\n\n      if (typeof cur.value == \"object\") {\n        Object.values(cur.value).forEach((item, i) => {\n          if (item === target && keys[i] === \"section_id\") {\n            matchId = true;\n          }\n        });\n      }\n\n      if (matchId) {\n        doesContain = true;\n        retVal = cur;\n        matchId = false;\n      } else {\n        for (let i = 0; i < cur.children.length; i += 1) {\n          let keys = Object.keys(cur.children[i].value);\n\n          if (typeof cur.children[i].value == \"object\") {\n            Object.values(cur.children[i].value).forEach((item, i) => {\n              if (item === target && keys[i] === \"section_id\") {\n                matchId = true;\n              }\n            });\n          }\n\n          if (matchId) {\n            doesContain = true;\n            retVal = cur.children[i];\n            matchId = false;\n          }\n\n          if (cur.children[i].children.length > 0) {\n            recurse(cur.children[i]);\n          }\n        }\n      }\n    }\n\n    ;\n    recurse(this);\n\n    if (doesContain === true) {\n      return retVal;\n    }\n\n    ;\n  }\n\n}\n\n;","map":{"version":3,"sources":["/Users/olegkuftyrev/Downloads/javascript 2/skeleton/src/views/application/orgchart/Tree.js"],"names":["Tree","constructor","value","children","addChild","newChild","push","contains","target","doesContain","recurse","cur","JSON","stringify","i","length","retval","containsId","matchId","Object","values","forEach","item","getNode","retVal","getNodeById","keys"],"mappings":"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","sourcesContent":["class Tree {\n    constructor(value) {\n      this.value = value;\n      this.children = [];\n    }\n   \n    addChild (value) {\n      const newChild = new Tree(value);\n      this.children.push(newChild);\n    }\n   \n    contains (target) {\n     let doesContain = false;\n     function recurse(cur) {\n       if (cur.value == target || JSON.stringify(cur.value) == JSON.stringify(target)) {\n         doesContain = true;\n       } else {\n         for (let i=0;i < cur.children.length;i+=1) {\n           if (cur.children[i].value == target || JSON.stringify(cur.children[i].value) == JSON.stringify(target)) {\n             doesContain = true;\n           }\n           if (cur.children[i].children.length > 0) {\n             recurse(cur.children[i]);\n           }\n         }\n       }\n     };\n     recurse(this);\n     let retval = false;\n     if (doesContain === true) {\n       retval = true;\n     };\n     return retval;\n    };\n   \n   containsId (target) {\n     let doesContain = false;\n     function recurse(cur) {\n       let matchId = false;\n       if (typeof cur.value == \"object\") {\n         Object.values(cur.value).forEach((item, i) => {\n           if (item == target && i === 0) {\n             matchId = true;\n           }\n         })\n       }\n       if (cur.value == target || JSON.stringify(cur.value) == JSON.stringify(target) || matchId) {\n         doesContain = true;\n       } else {\n         for (let i=0;i < cur.children.length;i+=1) {\n           if (typeof cur.children[i].value == \"object\") {\n             Object.values(cur.children[i].value).forEach((item, i) => {\n               if (item == target && i === 0) {\n                 matchId = true;\n               }\n             })\n           }\n           if (cur.children[i].value == target || JSON.stringify(cur.children[i].value) == JSON.stringify(target) || matchId) {\n             doesContain = true;\n           }\n           if (cur.children[i].children.length > 0) {\n             recurse(cur.children[i]);\n           }\n         }\n       }\n     };\n     recurse(this);\n     let retval = false;\n     if (doesContain === true) {\n       retval = true;\n     };\n     return retval;\n    };\n   \n   getNode (target) {\n     let doesContain = false;\n     let retVal;\n     function recurse(cur) {\n       if (cur.value == target || JSON.stringify(cur.value) == JSON.stringify(target)) {\n         doesContain = true;\n         retVal = cur;\n       } else {\n         for (let i=0;i < cur.children.length;i+=1) {\n           if (cur.children[i].value == target || JSON.stringify(cur.children[i].value) == JSON.stringify(target)) {\n             doesContain = true;\n             retVal = cur.children[i];\n           }\n           if (cur.children[i].children.length > 0) {\n             recurse(cur.children[i]);\n           }\n         }\n       }\n     };\n     recurse(this);\n     if (doesContain === true) {\n       return retVal;\n     };\n   }\n   \n   getNodeById (target) {\n     let doesContain = false;\n     let retVal;\n     function recurse(cur) {\n       let matchId = false;\n       let keys = Object.keys(cur.value)\n       if (typeof cur.value == \"object\") {\n         Object.values(cur.value).forEach((item, i) => {\n           if (item === target && keys[i] === \"section_id\") {\n             matchId = true;\n           }\n         })\n       }\n       if (matchId) {\n         doesContain = true;\n         retVal = cur;\n         matchId = false;\n       } else {\n         for (let i=0;i < cur.children.length;i+=1) {\n           let keys = Object.keys(cur.children[i].value)\n           if (typeof cur.children[i].value == \"object\") {\n             Object.values(cur.children[i].value).forEach((item, i) => {\n               if (item === target && keys[i] === \"section_id\") {\n                 matchId = true;\n               }\n             })\n           }\n           if (matchId) {\n             doesContain = true;\n             retVal = cur.children[i];\n             matchId = false;\n           }\n           if (cur.children[i].children.length > 0) {\n             recurse(cur.children[i]);\n           }\n         }\n       }\n     };\n     recurse(this);\n     if (doesContain === true) {\n       return retVal;\n     };\n    };\n  };\n "]},"metadata":{},"sourceType":"module"}