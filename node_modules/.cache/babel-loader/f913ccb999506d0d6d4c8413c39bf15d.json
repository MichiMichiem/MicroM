{"ast":null,"code":"// class Tree {\n//     constructor(value) {\n//       this.value = value;\n//       this.children = [];\n//     }\n//     addChild (value) {\n//       const newChild = new Tree(value);\n//       this.children.push(newChild);\n//     }\n//     contains (target) {\n//      let doesContain = false;\n//      function recurse(cur) {\n//        if (cur.value == target || JSON.stringify(cur.value) == JSON.stringify(target)) {\n//          doesContain = true;\n//        } else {\n//          for (let i=0;i < cur.children.length;i+=1) {\n//            if (cur.children[i].value == target || JSON.stringify(cur.children[i].value) == JSON.stringify(target)) {\n//              doesContain = true;\n//            }\n//            if (cur.children[i].children.length > 0) {\n//              recurse(cur.children[i]);\n//            }\n//          }\n//        }\n//      };\n//      recurse(this);\n//      let retval = false;\n//      if (doesContain === true) {\n//        retval = true;\n//      };\n//      return retval;\n//     };\n//    containsId (target) {\n//      let doesContain = false;\n//      function recurse(cur) {\n//        let matchId = false;\n//        if (typeof cur.value == \"object\") {\n//          Object.values(cur.value).forEach((item, i) => {\n//            if (item == target && i === 0) {\n//              matchId = true;\n//            }\n//          })\n//        }\n//        if (cur.value == target || JSON.stringify(cur.value) == JSON.stringify(target) || matchId) {\n//          doesContain = true;\n//        } else {\n//          for (let i=0;i < cur.children.length;i+=1) {\n//            if (typeof cur.children[i].value == \"object\") {\n//              Object.values(cur.children[i].value).forEach((item, i) => {\n//                if (item == target && i === 0) {\n//                  matchId = true;\n//                }\n//              })\n//            }\n//            if (cur.children[i].value == target || JSON.stringify(cur.children[i].value) == JSON.stringify(target) || matchId) {\n//              doesContain = true;\n//            }\n//            if (cur.children[i].children.length > 0) {\n//              recurse(cur.children[i]);\n//            }\n//          }\n//        }\n//      };\n//      recurse(this);\n//      let retval = false;\n//      if (doesContain === true) {\n//        retval = true;\n//      };\n//      return retval;\n//     };\n//    getNode (target) {\n//      let doesContain = false;\n//      let retVal;\n//      function recurse(cur) {\n//        if (cur.value == target || JSON.stringify(cur.value) == JSON.stringify(target)) {\n//          doesContain = true;\n//          retVal = cur;\n//        } else {\n//          for (let i=0;i < cur.children.length;i+=1) {\n//            if (cur.children[i].value == target || JSON.stringify(cur.children[i].value) == JSON.stringify(target)) {\n//              doesContain = true;\n//              retVal = cur.children[i];\n//            }\n//            if (cur.children[i].children.length > 0) {\n//              recurse(cur.children[i]);\n//            }\n//          }\n//        }\n//      };\n//      recurse(this);\n//      if (doesContain === true) {\n//        return retVal;\n//      };\n//    }\n//    getNodeById (target) {\n//      let doesContain = false;\n//      let retVal;\n//      function recurse(cur) {\n//        let matchId = false;\n//        let keys = Object.keys(cur.value)\n//        if (typeof cur.value == \"object\") {\n//          Object.values(cur.value).forEach((item, i) => {\n//            if (item === target && keys[i] === \"section_id\") {\n//              matchId = true;\n//            }\n//          })\n//        }\n//        if (matchId) {\n//          doesContain = true;\n//          retVal = cur;\n//          matchId = false;\n//        } else {\n//          for (let i=0;i < cur.children.length;i+=1) {\n//            let keys = Object.keys(cur.children[i].value)\n//            if (typeof cur.children[i].value == \"object\") {\n//              Object.values(cur.children[i].value).forEach((item, i) => {\n//                if (item === target && keys[i] === \"section_id\") {\n//                  matchId = true;\n//                }\n//              })\n//            }\n//            if (matchId) {\n//              doesContain = true;\n//              retVal = cur.children[i];\n//              matchId = false;\n//            }\n//            if (cur.children[i].children.length > 0) {\n//              recurse(cur.children[i]);\n//            }\n//          }\n//        }\n//      };\n//      recurse(this);\n//      if (doesContain === true) {\n//        return retVal;\n//      };\n//     };\n//   };","map":{"version":3,"sources":["/Users/olegkuftyrev/Downloads/javascript 2/skeleton/src/views/application/orgchart/Tree.js"],"names":[],"mappingssourcesContent":["// class Tree {\n//     constructor(value) {\n//       this.value = value;\n//       this.children = [];\n//     }\n   \n//     addChild (value) {\n//       const newChild = new Tree(value);\n//       this.children.push(newChild);\n//     }\n   \n//     contains (target) {\n//      let doesContain = false;\n//      function recurse(cur) {\n//        if (cur.value == target || JSON.stringify(cur.value) == JSON.stringify(target)) {\n//          doesContain = true;\n//        } else {\n//          for (let i=0;i < cur.children.length;i+=1) {\n//            if (cur.children[i].value == target || JSON.stringify(cur.children[i].value) == JSON.stringify(target)) {\n//              doesContain = true;\n//            }\n//            if (cur.children[i].children.length > 0) {\n//              recurse(cur.children[i]);\n//            }\n//          }\n//        }\n//      };\n//      recurse(this);\n//      let retval = false;\n//      if (doesContain === true) {\n//        retval = true;\n//      };\n//      return retval;\n//     };\n   \n//    containsId (target) {\n//      let doesContain = false;\n//      function recurse(cur) {\n//        let matchId = false;\n//        if (typeof cur.value == \"object\") {\n//          Object.values(cur.value).forEach((item, i) => {\n//            if (item == target && i === 0) {\n//              matchId = true;\n//            }\n//          })\n//        }\n//        if (cur.value == target || JSON.stringify(cur.value) == JSON.stringify(target) || matchId) {\n//          doesContain = true;\n//        } else {\n//          for (let i=0;i < cur.children.length;i+=1) {\n//            if (typeof cur.children[i].value == \"object\") {\n//              Object.values(cur.children[i].value).forEach((item, i) => {\n//                if (item == target && i === 0) {\n//                  matchId = true;\n//                }\n//              })\n//            }\n//            if (cur.children[i].value == target || JSON.stringify(cur.children[i].value) == JSON.stringify(target) || matchId) {\n//              doesContain = true;\n//            }\n//            if (cur.children[i].children.length > 0) {\n//              recurse(cur.children[i]);\n//            }\n//          }\n//        }\n//      };\n//      recurse(this);\n//      let retval = false;\n//      if (doesContain === true) {\n//        retval = true;\n//      };\n//      return retval;\n//     };\n   \n//    getNode (target) {\n//      let doesContain = false;\n//      let retVal;\n//      function recurse(cur) {\n//        if (cur.value == target || JSON.stringify(cur.value) == JSON.stringify(target)) {\n//          doesContain = true;\n//          retVal = cur;\n//        } else {\n//          for (let i=0;i < cur.children.length;i+=1) {\n//            if (cur.children[i].value == target || JSON.stringify(cur.children[i].value) == JSON.stringify(target)) {\n//              doesContain = true;\n//              retVal = cur.children[i];\n//            }\n//            if (cur.children[i].children.length > 0) {\n//              recurse(cur.children[i]);\n//            }\n//          }\n//        }\n//      };\n//      recurse(this);\n//      if (doesContain === true) {\n//        return retVal;\n//      };\n//    }\n   \n//    getNodeById (target) {\n//      let doesContain = false;\n//      let retVal;\n//      function recurse(cur) {\n//        let matchId = false;\n//        let keys = Object.keys(cur.value)\n//        if (typeof cur.value == \"object\") {\n//          Object.values(cur.value).forEach((item, i) => {\n//            if (item === target && keys[i] === \"section_id\") {\n//              matchId = true;\n//            }\n//          })\n//        }\n//        if (matchId) {\n//          doesContain = true;\n//          retVal = cur;\n//          matchId = false;\n//        } else {\n//          for (let i=0;i < cur.children.length;i+=1) {\n//            let keys = Object.keys(cur.children[i].value)\n//            if (typeof cur.children[i].value == \"object\") {\n//              Object.values(cur.children[i].value).forEach((item, i) => {\n//                if (item === target && keys[i] === \"section_id\") {\n//                  matchId = true;\n//                }\n//              })\n//            }\n//            if (matchId) {\n//              doesContain = true;\n//              retVal = cur.children[i];\n//              matchId = false;\n//            }\n//            if (cur.children[i].children.length > 0) {\n//              recurse(cur.children[i]);\n//            }\n//          }\n//        }\n//      };\n//      recurse(this);\n//      if (doesContain === true) {\n//        return retVal;\n//      };\n//     };\n//   };\n "]},"metadata":{},"sourceType":"module"}