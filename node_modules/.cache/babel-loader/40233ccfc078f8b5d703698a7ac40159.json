{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux'; // material-ui\n\nimport { makeStyles, useTheme } from '@material-ui/styles';\nimport { Avatar, Box, ButtonBase, ClickAwayListener, Grid, List, ListItemText, Paper, Popper, Typography, useMediaQuery } from '@material-ui/core';\nimport ListItemButton from '@material-ui/core/ListItemButton'; // project imports\n\nimport Transitions from 'ui-component/extended/Transitions';\nimport * as actionTypes from 'store/actions'; // assets\n\nimport TranslateTwoToneIcon from '@material-ui/icons/TranslateTwoTone';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  navContainer: {\n    width: '100%',\n    minWidth: '200px',\n    maxWidth: '280px',\n    backgroundColor: theme.palette.background.paper,\n    borderRadius: '10px',\n    [theme.breakpoints.down('sm')]: {\n      maxWidth: '250px'\n    }\n  },\n  headerAvatar: { ...theme.typography.commonAvatar,\n    ...theme.typography.mediumAvatar,\n    border: '1px solid',\n    borderColor: theme.palette.mode === 'dark' ? theme.palette.dark.main : theme.palette.primary.light,\n    background: theme.palette.mode === 'dark' ? theme.palette.dark.main : theme.palette.primary.light,\n    color: theme.palette.primary.dark,\n    transition: 'all .2s ease-in-out',\n    '&[aria-controls=\"menu-list-grow\"],&:hover': {\n      borderColor: theme.palette.primary.main,\n      background: theme.palette.primary.main,\n      color: theme.palette.primary.light\n    }\n  },\n  box: {\n    marginLeft: '16px',\n    [theme.breakpoints.down('sm')]: {\n      marginLeft: '8px'\n    }\n  }\n})); // ===========================|| LOCALIZATION ||=========================== //\n\nconst LocalizationSection = () => {\n  _s();\n\n  const classes = useStyles();\n  const customization = useSelector(state => state.customization);\n  const dispatch = useDispatch();\n  const theme = useTheme();\n  const matchesXs = useMediaQuery(theme.breakpoints.down('sm'));\n  const [open, setOpen] = React.useState(false);\n  const anchorRef = React.useRef(null);\n  const [language, setLanguage] = React.useState(customization.locale);\n\n  const handleListItemClick = (event, index) => {\n    setLanguage(index);\n    dispatch({\n      type: actionTypes.THEME_LOCALE,\n      locale: index\n    });\n    setOpen(false);\n  };\n\n  const handleToggle = () => {\n    setOpen(prevOpen => !prevOpen);\n  };\n\n  const handleClose = event => {\n    if (anchorRef.current && anchorRef.current.contains(event.target)) {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  const prevOpen = React.useRef(open);\n  React.useEffect(() => {\n    if (prevOpen.current === true && open === false) {\n      anchorRef.current.focus();\n    }\n\n    prevOpen.current = open;\n  }, [open]);\n  React.useEffect(() => {\n    setLanguage(customization.locale);\n  }, [customization]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n\n_s(LocalizationSection, \"LqghFkntOjXNo4fr5lrM0RHP0Uo=\", false, function () {\n  return [useStyles, useSelector, useDispatch, useTheme, useMediaQuery];\n});\n\n_c = LocalizationSection;\nexport default LocalizationSection;\n\nvar _c;\n\n$RefreshReg$(_c, \"LocalizationSection\");","map":{"version":3,"sources":["/Users/olegkuftyrev/Downloads/javascript 2/skeleton/src/layout/MainLayout/Header/LocalizationSection/index.js"],"names":["React","useDispatch","useSelector","makeStyles","useTheme","Avatar","Box","ButtonBase","ClickAwayListener","Grid","List","ListItemText","Paper","Popper","Typography","useMediaQuery","ListItemButton","Transitions","actionTypes","TranslateTwoToneIcon","useStyles","theme","navContainer","width","minWidth","maxWidth","backgroundColor","palette","background","paper","borderRadius","breakpoints","down","headerAvatar","typography","commonAvatar","mediumAvatar","border","borderColor","mode","dark","main","primary","light","color","transition","box","marginLeft","LocalizationSection","classes","customization","state","dispatch","matchesXs","open","setOpen","useState","anchorRef","useRef","language","setLanguage","locale","handleListItemClick","event","index","type","THEME_LOCALE","handleToggle","prevOpen","handleClose","current","contains","target","useEffect","focus"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\n// material-ui\r\nimport { makeStyles, useTheme } from '@material-ui/styles';\r\nimport {\r\n    Avatar,\r\n    Box,\r\n    ButtonBase,\r\n    ClickAwayListener,\r\n    Grid,\r\n    List,\r\n    ListItemText,\r\n    Paper,\r\n    Popper,\r\n    Typography,\r\n    useMediaQuery\r\n} from '@material-ui/core';\r\nimport ListItemButton from '@material-ui/core/ListItemButton';\r\n\r\n// project imports\r\nimport Transitions from 'ui-component/extended/Transitions';\r\nimport * as actionTypes from 'store/actions';\r\n\r\n// assets\r\nimport TranslateTwoToneIcon from '@material-ui/icons/TranslateTwoTone';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    navContainer: {\r\n        width: '100%',\r\n        minWidth: '200px',\r\n        maxWidth: '280px',\r\n        backgroundColor: theme.palette.background.paper,\r\n        borderRadius: '10px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            maxWidth: '250px'\r\n        }\r\n    },\r\n    headerAvatar: {\r\n        ...theme.typography.commonAvatar,\r\n        ...theme.typography.mediumAvatar,\r\n        border: '1px solid',\r\n        borderColor: theme.palette.mode === 'dark' ? theme.palette.dark.main : theme.palette.primary.light,\r\n        background: theme.palette.mode === 'dark' ? theme.palette.dark.main : theme.palette.primary.light,\r\n        color: theme.palette.primary.dark,\r\n        transition: 'all .2s ease-in-out',\r\n        '&[aria-controls=\"menu-list-grow\"],&:hover': {\r\n            borderColor: theme.palette.primary.main,\r\n            background: theme.palette.primary.main,\r\n            color: theme.palette.primary.light\r\n        }\r\n    },\r\n    box: {\r\n        marginLeft: '16px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginLeft: '8px'\r\n        }\r\n    }\r\n}));\r\n\r\n// ===========================|| LOCALIZATION ||=========================== //\r\n\r\nconst LocalizationSection = () => {\r\n    const classes = useStyles();\r\n    const customization = useSelector((state) => state.customization);\r\n    const dispatch = useDispatch();\r\n\r\n    const theme = useTheme();\r\n    const matchesXs = useMediaQuery(theme.breakpoints.down('sm'));\r\n\r\n    const [open, setOpen] = React.useState(false);\r\n    const anchorRef = React.useRef(null);\r\n    const [language, setLanguage] = React.useState(customization.locale);\r\n\r\n    const handleListItemClick = (event, index) => {\r\n        setLanguage(index);\r\n        dispatch({ type: actionTypes.THEME_LOCALE, locale: index });\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleToggle = () => {\r\n        setOpen((prevOpen) => !prevOpen);\r\n    };\r\n\r\n    const handleClose = (event) => {\r\n        if (anchorRef.current && anchorRef.current.contains(event.target)) {\r\n            return;\r\n        }\r\n        setOpen(false);\r\n    };\r\n\r\n    const prevOpen = React.useRef(open);\r\n    React.useEffect(() => {\r\n        if (prevOpen.current === true && open === false) {\r\n            anchorRef.current.focus();\r\n        }\r\n        prevOpen.current = open;\r\n    }, [open]);\r\n\r\n    React.useEffect(() => {\r\n        setLanguage(customization.locale);\r\n    }, [customization]);\r\n\r\n    return (\r\n        <>\r\n\r\n        {/* dsds\r\n        dsd \r\n            <Box component=\"span\" className={classes.box}>\r\n                <ButtonBase sx={{ borderRadius: '12px' }}>\r\n                    <Avatar\r\n                        variant=\"rounded\"\r\n                        className={classes.headerAvatar}\r\n                        ref={anchorRef}\r\n                        aria-controls={open ? 'menu-list-grow' : undefined}\r\n                        aria-haspopup=\"true\"\r\n                        onClick={handleToggle}\r\n                        color=\"inherit\"\r\n                    >\r\n                        {language !== 'en' && (\r\n                            <Typography variant=\"h5\" sx={{ textTransform: 'uppercase' }} color=\"inherit\">\r\n                                {language}\r\n                            </Typography>\r\n                        )}\r\n                        {language === 'en' && <TranslateTwoToneIcon sx={{ fontSize: '1.3rem' }} />}\r\n                    </Avatar>\r\n                </ButtonBase>\r\n            </Box>\r\n\r\n            <Popper\r\n                placement={matchesXs ? 'bottom-start' : 'bottom'}\r\n                open={open}\r\n                anchorEl={anchorRef.current}\r\n                role={undefined}\r\n                transition\r\n                disablePortal\r\n                popperOptions={{\r\n                    modifiers: [\r\n                        {\r\n                            name: 'offset',\r\n                            options: {\r\n                                offset: [matchesXs ? 0 : 0, 20]\r\n                            }\r\n                        }\r\n                    ]\r\n                }}\r\n            >\r\n                {({ TransitionProps }) => (\r\n                    <Transitions position=\"top\" in={open} {...TransitionProps}>\r\n                        <Paper elevation={16}>\r\n                            <ClickAwayListener onClickAway={handleClose}>\r\n                                <List component=\"nav\" className={classes.navContainer}>\r\n                                    <ListItemButton selected={language === 'en'} onClick={(event) => handleListItemClick(event, 'en')}>\r\n                                        <ListItemText\r\n                                            primary={\r\n                                                <Grid container>\r\n                                                    <Typography color=\"textPrimary\">English</Typography>\r\n                                                    <Typography variant=\"caption\" color=\"textSecondary\" sx={{ ml: '8px' }}>\r\n                                                        (UK)\r\n                                                    </Typography>\r\n                                                </Grid>\r\n                                            }\r\n                                        />\r\n                                    </ListItemButton>\r\n                                    <ListItemButton selected={language === 'fr'} onClick={(event) => handleListItemClick(event, 'fr')}>\r\n                                        <ListItemText\r\n                                            primary={\r\n                                                <Grid container>\r\n                                                    <Typography color=\"textPrimary\">français</Typography>\r\n                                                    <Typography variant=\"caption\" color=\"textSecondary\" sx={{ ml: '8px' }}>\r\n                                                        (French)\r\n                                                    </Typography>\r\n                                                </Grid>\r\n                                            }\r\n                                        />\r\n                                    </ListItemButton>\r\n                                    <ListItemButton selected={language === 'ro'} onClick={(event) => handleListItemClick(event, 'ro')}>\r\n                                        <ListItemText\r\n                                            primary={\r\n                                                <Grid container>\r\n                                                    <Typography color=\"textPrimary\">Română</Typography>\r\n                                                    <Typography variant=\"caption\" color=\"textSecondary\" sx={{ ml: '8px' }}>\r\n                                                        (Romanian)\r\n                                                    </Typography>\r\n                                                </Grid>\r\n                                            }\r\n                                        />\r\n                                    </ListItemButton>\r\n                                    <ListItemButton selected={language === 'zh'} onClick={(event) => handleListItemClick(event, 'zh')}>\r\n                                        <ListItemText\r\n                                            primary={\r\n                                                <Grid container>\r\n                                                    <Typography color=\"textPrimary\">中国人</Typography>\r\n                                                    <Typography variant=\"caption\" color=\"textSecondary\" sx={{ ml: '8px' }}>\r\n                                                        (Chinese)\r\n                                                    </Typography>\r\n                                                </Grid>\r\n                                            }\r\n                                        />\r\n                                    </ListItemButton>\r\n                                </List>\r\n                            </ClickAwayListener>\r\n                        </Paper>\r\n                    </Transitions>\r\n                )}\r\n            </Popper>\r\n       \r\n       */}\r\n            </>\r\n    );\r\n};\r\n\r\nexport default LocalizationSection;\r\n"]},"metadata":{},"sourceType":"module"}