{"ast":null,"code":"class Tree {\n  constructor(value) {\n    this.value = value;\n    this.children = [];\n  }\n\n  addChild(value) {\n    const newChild = new Tree(value);\n    this.children.push(newChild);\n  }\n\n  contains(target) {\n    let doesContain = false;\n\n    function recurse(cur) {\n      if (cur.value == target || JSON.stringify(cur.value) == JSON.stringify(target)) {\n        doesContain = true;\n      } else {\n        for (let i = 0; i < cur.children.length; i += 1) {\n          if (cur.children[i].value == target || JSON.stringify(cur.children[i].value) == JSON.stringify(target)) {\n            doesContain = true;\n          }\n\n          if (cur.children[i].children.length > 0) {\n            recurse(cur.children[i]);\n          }\n        }\n      }\n    }\n\n    ;\n    recurse(this);\n    let retval = false;\n\n    if (doesContain === true) {\n      retval = true;\n    }\n\n    ;\n    return retval;\n  }\n\n  getNode(target) {\n    let doesContain = false;\n    let retVal;\n\n    function recurse(cur) {\n      if (cur.value == target || JSON.stringify(cur.value) == JSON.stringify(target)) {\n        doesContain = true;\n        retVal = cur;\n      } else {\n        for (let i = 0; i < cur.children.length; i += 1) {\n          if (cur.children[i].value == target || JSON.stringify(cur.children[i].value) == JSON.stringify(target)) {\n            doesContain = true;\n            retVal = cur;\n          }\n\n          if (cur.children[i].children.length > 0) {\n            recurse(cur.children[i]);\n          }\n        }\n      }\n    }\n\n    ;\n    recurse(this);\n\n    if (doesContain === true) {\n      return retVal;\n    }\n\n    ;\n  }\n\n}\n\n;\nexport default Tree;","map":{"version":3,"sources":["/Users/olegkuftyrev/Downloads/javascript 2/skeleton/src/views/application/orgchart/Tree.js"],"names":["Tree","constructor","value","children","addChild","newChild","push","contains","target","doesContain","recurse","cur","JSON","stringify","i","length","retval","getNode","retVal"],"mappings":"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","sourcesContent":["class Tree {\n    constructor(value) {\n      this.value = value;\n      this.children = [];\n    }\n    addChild (value) {\n      const newChild = new Tree(value);\n      this.children.push(newChild);\n    }\n    contains (target) {\n     let doesContain = false;\n     function recurse(cur) {\n       if (cur.value == target || JSON.stringify(cur.value) == JSON.stringify(target)) {\n         doesContain = true;\n       } else {\n         for (let i=0;i < cur.children.length;i+=1) {\n           if (cur.children[i].value == target || JSON.stringify(cur.children[i].value) == JSON.stringify(target)) {\n             doesContain = true;\n           }\n           if (cur.children[i].children.length > 0) {\n             recurse(cur.children[i]);\n           }\n         }\n       }\n     };\n     recurse(this);\n     let retval = false;\n     if (doesContain === true) {\n       retval = true;\n     };\n     return retval;\n    };\n   getNode (target) {\n     let doesContain = false;\n     let retVal;\n     function recurse(cur) {\n       if (cur.value == target || JSON.stringify(cur.value) == JSON.stringify(target)) {\n         doesContain = true;\n         retVal = cur;\n       } else {\n         for (let i=0;i < cur.children.length;i+=1) {\n           if (cur.children[i].value == target || JSON.stringify(cur.children[i].value) == JSON.stringify(target)) {\n             doesContain = true;\n             retVal = cur;\n           }\n           if (cur.children[i].children.length > 0) {\n             recurse(cur.children[i]);\n           }\n         }\n       }\n     };\n     recurse(this);\n     if (doesContain === true) {\n       return retVal;\n     };\n   }\n  };\nexport default Tree;"]},"metadata":{},"sourceType":"module"}