{"ast":null,"code":"var _jsxFileName = \"/Users/olegkuftyrev/Downloads/javascript 2/skeleton/src/views/ui-elements/advance/UIToggleButton/ToggleButtonNotEmpty.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react'; // material-ui\n\nimport { makeStyles, useTheme } from '@material-ui/styles';\nimport { Grid, ToggleButton, ToggleButtonGroup } from '@material-ui/core'; // assets\n\nimport FormatAlignLeftIcon from '@material-ui/icons/FormatAlignLeftTwoTone';\nimport FormatAlignCenterIcon from '@material-ui/icons/FormatAlignCenterTwoTone';\nimport FormatAlignRightIcon from '@material-ui/icons/FormatAlignRightTwoTone';\nimport FormatAlignJustifyIcon from '@material-ui/icons/FormatAlignJustifyTwoTone';\nimport LaptopIcon from '@material-ui/icons/LaptopTwoTone';\nimport TvIcon from '@material-ui/icons/TvTwoTone';\nimport PhoneAndroidIcon from '@material-ui/icons/PhoneAndroidTwoTone'; // style constant\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  toggleContainer: {\n    margin: theme.spacing(2, 0)\n  }\n})); // ============================|| UI TOGGLE BUTTON - NO EMPTY ||============================ //\n\nexport default function ToggleButtonNotEmpty() {\n  _s();\n\n  const classes = useStyles();\n  const theme = useTheme();\n  const [formats, setFormats] = React.useState(() => ['phone']);\n\n  const handleFormat = (event, newFormats) => {\n    if (newFormats.length) {\n      setFormats(newFormats);\n    }\n  };\n\n  const [alignment, setAlignment] = React.useState('left');\n\n  const handleAlignment = (event, newAlignment) => {\n    if (newAlignment !== null) {\n      setAlignment(newAlignment);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    spacing: 2,\n    direction: \"column\",\n    alignItems: \"center\",\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.toggleContainer,\n        children: /*#__PURE__*/_jsxDEV(ToggleButtonGroup, {\n          value: alignment,\n          exclusive: true,\n          onChange: handleAlignment,\n          \"aria-label\": \"text alignment\",\n          sx: {\n            color: theme.palette.success.dark,\n            bgcolor: theme.palette.mode === 'dark' ? 'dark.800' : theme.palette.primary.light\n          },\n          children: [/*#__PURE__*/_jsxDEV(ToggleButton, {\n            value: \"left\",\n            \"aria-label\": \"left aligned\",\n            children: /*#__PURE__*/_jsxDEV(FormatAlignLeftIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ToggleButton, {\n            value: \"center\",\n            \"aria-label\": \"centered\",\n            children: /*#__PURE__*/_jsxDEV(FormatAlignCenterIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ToggleButton, {\n            value: \"right\",\n            \"aria-label\": \"right aligned\",\n            children: /*#__PURE__*/_jsxDEV(FormatAlignRightIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ToggleButton, {\n            value: \"justify\",\n            \"aria-label\": \"justified\",\n            disabled: true,\n            children: /*#__PURE__*/_jsxDEV(FormatAlignJustifyIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.toggleContainer,\n        children: /*#__PURE__*/_jsxDEV(ToggleButtonGroup, {\n          value: formats,\n          onChange: handleFormat,\n          \"aria-label\": \"device\",\n          sx: {\n            color: theme.palette.warning.dark,\n            bgcolor: theme.palette.mode === 'dark' ? 'dark.800' : theme.palette.primary.light\n          },\n          children: [/*#__PURE__*/_jsxDEV(ToggleButton, {\n            value: \"laptop\",\n            \"aria-label\": \"laptop\",\n            children: /*#__PURE__*/_jsxDEV(LaptopIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ToggleButton, {\n            value: \"tv\",\n            \"aria-label\": \"tv\",\n            children: /*#__PURE__*/_jsxDEV(TvIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ToggleButton, {\n            value: \"phone\",\n            \"aria-label\": \"phone\",\n            children: /*#__PURE__*/_jsxDEV(PhoneAndroidIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ToggleButtonNotEmpty, \"VMEw0KlNFqBiMmt0oQvJPa7J+8I=\", false, function () {\n  return [useStyles, useTheme];\n});\n\n_c = ToggleButtonNotEmpty;\n\nvar _c;\n\n$RefreshReg$(_c, \"ToggleButtonNotEmpty\");","map":{"version":3,"sources":["/Users/olegkuftyrev/Downloads/javascript 2/skeleton/src/views/ui-elements/advance/UIToggleButton/ToggleButtonNotEmpty.js"],"names":["React","makeStyles","useTheme","Grid","ToggleButton","ToggleButtonGroup","FormatAlignLeftIcon","FormatAlignCenterIcon","FormatAlignRightIcon","FormatAlignJustifyIcon","LaptopIcon","TvIcon","PhoneAndroidIcon","useStyles","theme","toggleContainer","margin","spacing","ToggleButtonNotEmpty","classes","formats","setFormats","useState","handleFormat","event","newFormats","length","alignment","setAlignment","handleAlignment","newAlignment","color","palette","success","dark","bgcolor","mode","primary","light","warning"],"mappings":"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","sourcesContent":["import React from 'react';\r\n\r\n// material-ui\r\nimport { makeStyles, useTheme } from '@material-ui/styles';\r\nimport { Grid, ToggleButton, ToggleButtonGroup } from '@material-ui/core';\r\n\r\n// assets\r\nimport FormatAlignLeftIcon from '@material-ui/icons/FormatAlignLeftTwoTone';\r\nimport FormatAlignCenterIcon from '@material-ui/icons/FormatAlignCenterTwoTone';\r\nimport FormatAlignRightIcon from '@material-ui/icons/FormatAlignRightTwoTone';\r\nimport FormatAlignJustifyIcon from '@material-ui/icons/FormatAlignJustifyTwoTone';\r\nimport LaptopIcon from '@material-ui/icons/LaptopTwoTone';\r\nimport TvIcon from '@material-ui/icons/TvTwoTone';\r\nimport PhoneAndroidIcon from '@material-ui/icons/PhoneAndroidTwoTone';\r\n\r\n// style constant\r\nconst useStyles = makeStyles((theme) => ({\r\n    toggleContainer: {\r\n        margin: theme.spacing(2, 0)\r\n    }\r\n}));\r\n\r\n// ============================|| UI TOGGLE BUTTON - NO EMPTY ||============================ //\r\n\r\nexport default function ToggleButtonNotEmpty() {\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n\r\n    const [formats, setFormats] = React.useState(() => ['phone']);\r\n    const handleFormat = (event, newFormats) => {\r\n        if (newFormats.length) {\r\n            setFormats(newFormats);\r\n        }\r\n    };\r\n\r\n    const [alignment, setAlignment] = React.useState('left');\r\n    const handleAlignment = (event, newAlignment) => {\r\n        if (newAlignment !== null) {\r\n            setAlignment(newAlignment);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Grid container spacing={2} direction=\"column\" alignItems=\"center\">\r\n            <Grid item xs={12}>\r\n                <div className={classes.toggleContainer}>\r\n                    <ToggleButtonGroup\r\n                        value={alignment}\r\n                        exclusive\r\n                        onChange={handleAlignment}\r\n                        aria-label=\"text alignment\"\r\n                        sx={{\r\n                            color: theme.palette.success.dark,\r\n                            bgcolor: theme.palette.mode === 'dark' ? 'dark.800' : theme.palette.primary.light\r\n                        }}\r\n                    >\r\n                        <ToggleButton value=\"left\" aria-label=\"left aligned\">\r\n                            <FormatAlignLeftIcon />\r\n                        </ToggleButton>\r\n                        <ToggleButton value=\"center\" aria-label=\"centered\">\r\n                            <FormatAlignCenterIcon />\r\n                        </ToggleButton>\r\n                        <ToggleButton value=\"right\" aria-label=\"right aligned\">\r\n                            <FormatAlignRightIcon />\r\n                        </ToggleButton>\r\n                        <ToggleButton value=\"justify\" aria-label=\"justified\" disabled>\r\n                            <FormatAlignJustifyIcon />\r\n                        </ToggleButton>\r\n                    </ToggleButtonGroup>\r\n                </div>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <div className={classes.toggleContainer}>\r\n                    <ToggleButtonGroup\r\n                        value={formats}\r\n                        onChange={handleFormat}\r\n                        aria-label=\"device\"\r\n                        sx={{\r\n                            color: theme.palette.warning.dark,\r\n                            bgcolor: theme.palette.mode === 'dark' ? 'dark.800' : theme.palette.primary.light\r\n                        }}\r\n                    >\r\n                        <ToggleButton value=\"laptop\" aria-label=\"laptop\">\r\n                            <LaptopIcon />\r\n                        </ToggleButton>\r\n                        <ToggleButton value=\"tv\" aria-label=\"tv\">\r\n                            <TvIcon />\r\n                        </ToggleButton>\r\n                        <ToggleButton value=\"phone\" aria-label=\"phone\">\r\n                            <PhoneAndroidIcon />\r\n                        </ToggleButton>\r\n                    </ToggleButtonGroup>\r\n                </div>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}